
mayak with PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076a  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d35  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00008121  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  00008181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	1c d0       	rcall	.+56     	; 0xae <main>
  76:	3b c0       	rjmp	.+118    	; 0xee <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <PWM_settings>:
#include <util/delay.h>            // библиотека для задержек


void PWM_settings (void)
{
	TCCR1A |= (1<<COM1A1) | (0<<COM1A0); // НЕинвертирующая  быстродействующая ШИМ- пилообразная форма импульсов опорного напряжения
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	80 68       	ori	r24, 0x80	; 128
  82:	80 83       	st	Z, r24
	    
    TCCR1A |= (1<<WGM10); // 10 бит ШИМ, быстро действ.
  84:	80 81       	ld	r24, Z
  86:	81 60       	ori	r24, 0x01	; 1
  88:	80 83       	st	Z, r24
    TCCR1A |= (1<<WGM11); // 10 бит ШИМ, быстро действ.
  8a:	80 81       	ld	r24, Z
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	80 83       	st	Z, r24
    TCCR1B |= (1<<WGM12); // 10 бит ШИМ, быстро действ.
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 60       	ori	r24, 0x08	; 8
  98:	80 83       	st	Z, r24
    TCCR1B &= ~(1<<WGM13); // 10 бит ШИМ, быстро действ.
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
	
    TCCR1B |= (1<<CS11); // Делим частоту МК на 8
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS10)|(1<<CS12)); // Делим частоту МК на 8 = 125000
  a6:	80 81       	ld	r24, Z
  a8:	8a 7f       	andi	r24, 0xFA	; 250
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <main>:
 }

int main(void) // здесь пишутся настройки микроконтроллера. будут выполннятся один раз. пропись настроек  в строке  main эконномит время микроконтроллера, ()- индификатор функции
{
    //Выходы ШИМ
	DDRB = 0b00000010; // т.к. 10 битная шим подключается только с  с oc1A, oc1b
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	84 b9       	out	0x04, r24	; 4
	
	PWM_settings ();
  b2:	e3 df       	rcall	.-58     	; 0x7a <PWM_settings>
	
    while (1) // здесь пишутся настройки микроконтроллера. будут выполннятся по кругу
    {
        OCR1A = 211; // определяет задающее напряжение 
  b4:	e8 e8       	ldi	r30, 0x88	; 136
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	23 ed       	ldi	r18, 0xD3	; 211
  ba:	30 e0       	ldi	r19, 0x00	; 0
        _delay_ms (500);
        OCR1A = 1023; // определяет задающее напряжение 
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	93 e0       	ldi	r25, 0x03	; 3
	
	PWM_settings ();
	
    while (1) // здесь пишутся настройки микроконтроллера. будут выполннятся по кругу
    {
        OCR1A = 211; // определяет задающее напряжение 
  c0:	31 83       	std	Z+1, r19	; 0x01
  c2:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	4f e9       	ldi	r20, 0x9F	; 159
  c6:	56 e8       	ldi	r21, 0x86	; 134
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	41 50       	subi	r20, 0x01	; 1
  cc:	50 40       	sbci	r21, 0x00	; 0
  ce:	60 40       	sbci	r22, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x26>
  d4:	00 00       	nop
        _delay_ms (500);
        OCR1A = 1023; // определяет задающее напряжение 
  d6:	91 83       	std	Z+1, r25	; 0x01
  d8:	80 83       	st	Z, r24
  da:	4f e9       	ldi	r20, 0x9F	; 159
  dc:	56 e8       	ldi	r21, 0x86	; 134
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	41 50       	subi	r20, 0x01	; 1
  e2:	50 40       	sbci	r21, 0x00	; 0
  e4:	60 40       	sbci	r22, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x32>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x3c>
  ea:	00 00       	nop
  ec:	e9 cf       	rjmp	.-46     	; 0xc0 <main+0x12>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
